        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <string.h>
        -:    3:#include <stdio.h>
        -:    4:#include <time.h>
        -:    5:#include "rngs.h"
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:
        -:    9://Adventurer test
        -:   10:
function main called 2 returned 100% blocks executed 87%
        2:   11:int main(int argc, char** argv){
        -:   12:	
        2:   13:	int numTests = atoi(argv[1]);
call    0 returned 100%
        2:   14:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        2:   15:	int passed = 0;
        -:   16:	
    10044:   17:	for(int i = 0; i < numTests; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    10042:   18:		int good = 0;
    10042:   19:		int numPlayers = rand() %(MAX_PLAYERS - 1) + 2;
call    0 returned 100%
        -:   20:		
        -:   21:		struct gameState game;
    10042:   22:		int k[10] = {adventurer, gardens, embargo, village, steward, mine, cutpurse, sea_hag, tribute, smithy};
        -:   23:		
    10042:   24:		initializeGame(numPlayers, k, rand(), &game);
call    0 returned 100%
call    1 returned 100%
        -:   25:		
    10042:   26:		int player = rand() % numPlayers;
call    0 returned 100%
    10042:   27:		game.whoseTurn = player;
    10042:   28:		int bonus = rand() % 50;
call    0 returned 100%
    10042:   29:        int choice1 = rand() % 50;
call    0 returned 100%
    10042:   30:        int choice2 = rand() % 50;
call    0 returned 100%
    10042:   31:        int choice3 = rand() % 50;
call    0 returned 100%
    10042:   32:        int handPos = rand() % MAX_HAND;
call    0 returned 100%
        -:   33:
        -:   34:        struct gameState orig;
    10042:   35:        memcpy(&orig, &game, sizeof(struct gameState));
        -:   36:		
    10042:   37:		cardEffect(adventurer, choice1, choice2, choice3, &game, handPos, &bonus);
call    0 returned 100%
        -:   38:		
    10042:   39:		if(game.handCount[player] == orig.handCount[player] + 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10042:   40:			good++;
        -:   41:		}
    10042:   42:		int cardDrawn1 = game.hand[player][game.handCount[player] - 1];
    10042:   43:		if(cardDrawn1 == copper || cardDrawn1 == silver || cardDrawn1 == gold){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    10042:   44:            good++;
        -:   45:        }
    10042:   46:		int cardDrawn2 = game.hand[player][game.handCount[player] - 2];
    10042:   47:        if(cardDrawn2 == copper || cardDrawn2 == silver || cardDrawn2 == gold){         
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    10042:   48:            good++;
        -:   49:        }
    10042:   50:		if(good >= 3){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10042:   51:			passed++;
        -:   52:		}
        -:   53:		
        -:   54:		
        -:   55:	}
        2:   56:	printf("RandomTestAdventurer: %d of %d TESTS PASSED\n", passed, numTests);
call    0 returned 100%
        -:   57:}

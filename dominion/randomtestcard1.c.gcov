        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <string.h>
        -:    3:#include <stdio.h>
        -:    4:#include <time.h>
        -:    5:#include "rngs.h"
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:
function main called 1 returned 100% blocks executed 100%
        1:    9://Village test
        -:   10:
        1:   11:int main(int argc, char** argv){
call    0 returned 1
        1:   12:	
call    0 returned 1
call    1 returned 1
        1:   13:	int numTests = atoi(argv[1]);
        -:   14:	srand(time(NULL));
       43:   15:	int passed = 0;
branch  0 taken 42
branch  1 taken 1 (fallthrough)
       42:   16:	
       42:   17:	for(int i = 0; i < numTests; i++){
call    0 returned 42
        -:   18:		int good = 0;
        -:   19:		int numPlayers = rand() %(MAX_PLAYERS - 1) + 2;
       42:   20:		
        -:   21:		struct gameState game;
       42:   22:		int k[10] = {adventurer, gardens, embargo, village, steward, mine, cutpurse, sea_hag, tribute, smithy};
call    0 returned 42
call    1 returned 42
        -:   23:		
       42:   24:		initializeGame(numPlayers, k, rand(), &game);
call    0 returned 42
       42:   25:		
       42:   26:		int player = rand() % numPlayers;
call    0 returned 42
       42:   27:		game.whoseTurn = player;
call    0 returned 42
       42:   28:		int bonus = rand() % 50;
call    0 returned 42
       42:   29:        int choice1 = rand() % 50;
call    0 returned 42
       42:   30:        int choice2 = rand() % 50;
call    0 returned 42
        -:   31:        int choice3 = rand() % 50;
        -:   32:        int handPos = rand() % MAX_HAND;
       42:   33:
        -:   34:        struct gameState orig;
       42:   35:        memcpy(&orig, &game, sizeof(struct gameState));
call    0 returned 42
        -:   36:		
       42:   37:		cardEffect(village, choice1, choice2, choice3, &game, handPos, &bonus);
branch  0 taken 42 (fallthrough)
branch  1 taken 0
       42:   38:		
        -:   39:		if(game.numActions > orig.numActions){
       42:   40:			good++;
branch  0 taken 42 (fallthrough)
branch  1 taken 0
       42:   41:		}
        -:   42:		if(game.handCount[player] == orig.handCount[player]){
       42:   43:			good++;
branch  0 taken 42 (fallthrough)
branch  1 taken 0
       42:   44:		}
        -:   45:		if(good >= 2){
        -:   46:			passed++;
        -:   47:		}
        1:   48:		
call    0 returned 1
        -:   49:	}
        -:   50:	printf("RandomTestVillage: %d of %d TESTS PASSED\n", passed, numTests);
        -:   51:}
        -:   52:
